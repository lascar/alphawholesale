diff --git a/app/controllers/attached_products_controller.rb b/app/controllers/attached_products_controller.rb
new file mode 100644
index 0000000..a676aff
--- /dev/null
+++ b/app/controllers/attached_products_controller.rb
@@ -0,0 +1,58 @@
+class AttachProductsController < ApplicationController
+  before_action :set_attach_product, only: [:show, :edit, :update, :destroy]
+
+  # GET /attach_products
+  def index
+    @attach_products = AttachProduct.all
+  end
+
+  # GET /attach_products/1
+  def show
+  end
+
+  # GET /attach_products/new
+  def new
+    @attach_product = AttachProduct.new
+  end
+
+  # GET /attach_products/1/edit
+  def edit
+  end
+
+  # POST /attach_products
+  def create
+    @attach_product = AttachProduct.new(attach_product_params)
+
+    if @attach_product.save
+      redirect_to @attach_product, notice: 'Attach product was successfully created.'
+    else
+      render :new
+    end
+  end
+
+  # PATCH/PUT /attach_products/1
+  def update
+    if @attach_product.update(attach_product_params)
+      redirect_to @attach_product, notice: 'Attach product was successfully updated.'
+    else
+      render :edit
+    end
+  end
+
+  # DELETE /attach_products/1
+  def destroy
+    @attach_product.destroy
+    redirect_to attach_products_url, notice: 'Attach product was successfully destroyed.'
+  end
+
+  private
+    # Use callbacks to share common setup or constraints between actions.
+    def set_attach_product
+      @attach_product = AttachProduct.find(params[:id])
+    end
+
+    # Only allow a trusted parameter "white list" through.
+    def attach_product_params
+      params.fetch(:attach_product, {})
+    end
+end
diff --git a/app/controllers/customers_controller.rb b/app/controllers/customers_controller.rb
index 432eb53..cbc3645 100644
--- a/app/controllers/customers_controller.rb
+++ b/app/controllers/customers_controller.rb
@@ -2,8 +2,7 @@ class CustomersController < ApplicationController
   include Utilities
   include SuppliersHelper
   before_action :authenticate_user!
-  before_action :set_customer, only: [:show, :edit, :update, :destroy,
-                                      :attach_products, :attach_products_create]
+  before_action :set_customer, only: [:show, :edit, :update, :destroy]
 
   # GET /customers
   def index
@@ -72,26 +71,6 @@ class CustomersController < ApplicationController
      notice: I18n.t('controllers.customers.successfully_destroyed')
   end
 
-  # GET /customers/1/attach_product
-  def attach_products
-    authorize @customer
-    @products_attached = @customer.products.ids
-    @products = Product.with_approved(true).
-     select{|p| !@products_attached.include?(p.id)}
-  end
-
-  # POST /customers/1/attach_product_create
-  def attach_products_create
-    authorize @customer
-    message = ""
-    @customer.products = []
-    params[:products].each do |product_id|
-      product = Product.find_by_id(product_id)
-      @customer.products << product
-    end
-    redirect_to "/customers/" + @customer.id.to_s, notice: message
-  end
-
  private
   # Use callbacks to share common setup or constraints between actions.
   def set_customer
diff --git a/app/controllers/suppliers_controller.rb b/app/controllers/suppliers_controller.rb
index 4760637..5063c07 100644
--- a/app/controllers/suppliers_controller.rb
+++ b/app/controllers/suppliers_controller.rb
@@ -2,8 +2,7 @@ class SuppliersController < ApplicationController
   include Utilities
   before_action :authenticate_user!
   before_action :set_supplier,
-   only: [:show, :edit, :update, :destroy,
-          :attach_products, :attach_products_create]
+   only: [:show, :edit, :update, :destroy]
 
   # GET /suppliers
   def index
@@ -72,26 +71,6 @@ class SuppliersController < ApplicationController
      notice: I18n.t('controllers.suppliers.successfully_destroyed')
   end
 
-  # GET /suppliers/1/attach_product
-  def attach_products
-    authorize @supplier
-    @products_attached = @supplier.products.ids
-    @products = Product.with_approved(true) +
-     Product.where(supplier_id: @supplier.id, approved: false)
-  end
-
-  # POST /suppliers/1/attach_product_create
-  def attach_products_create
-    authorize @supplier
-    message = ""
-    @supplier.products = []
-    params[:products].each do |product_id|
-      product = Product.find_by_id(product_id)
-      @supplier.products << product
-    end
-    redirect_to "/suppliers/" + @supplier.id.to_s, notice: message
-  end
-
   private
   def set_supplier
     @supplier = Supplier.find(params[:id])
diff --git a/app/models/attached_product.rb b/app/models/attached_product.rb
new file mode 100644
index 0000000..bc1d4fd
--- /dev/null
+++ b/app/models/attached_product.rb
@@ -0,0 +1,7 @@
+class AttachedProduct < ApplicationRecord
+  belongs_to :product
+  belongs_to :attachable, polymorphic: true
+  validates_with ProductApprovedValidator
+  validates_with ProductAlreadyAttachedValidator
+  # validates :product, uniqueness: {scope: :attachable, message: I18n.t('activerecord.errors.models.attached_product.product.uniquenes', product: product.name)}
+end
diff --git a/app/models/customer.rb b/app/models/customer.rb
index ab8ccc4..39421df 100644
--- a/app/models/customer.rb
+++ b/app/models/customer.rb
@@ -5,8 +5,8 @@ class Customer < ApplicationRecord
          :recoverable, :rememberable
   has_many :orders
   has_many :tenders
-  has_many :product_customers, dependent: :delete_all
-  has_many :products, through: :product_customers
+  has_many :attached_products, as: :attachable, dependent: :delete_all
+  has_many :products, through: :attached_products
   validates :identifier, presence: true, allow_blank: false, uniqueness: true
   validates :email, presence: true, allow_blank: false
   validates :tin, presence: true, allow_blank: false
diff --git a/app/models/product.rb b/app/models/product.rb
index e688f4e..80ed734 100644
--- a/app/models/product.rb
+++ b/app/models/product.rb
@@ -4,8 +4,8 @@ class Product < ApplicationRecord
   has_many :offers
   has_many :order_lines
   has_many :tender_lines
-  has_many :product_suppliers, dependent: :delete_all
-  has_many :suppliers, through: :product_suppliers
+  has_many :attached_products, dependent: :delete_all
+  has_many :customers, through: :attached_products
   validates :name, presence: true, allow_blank: false
   validates :name, uniqueness: true
   has_many :varieties
diff --git a/app/models/product_customer.rb b/app/models/product_customer.rb
deleted file mode 100644
index ff3ed7a..0000000
--- a/app/models/product_customer.rb
+++ /dev/null
@@ -1,4 +0,0 @@
-class ProductCustomer < ApplicationRecord
-  belongs_to :product
-  belongs_to :customer
-end
diff --git a/app/models/product_supplier.rb b/app/models/product_supplier.rb
deleted file mode 100644
index 7300ae3..0000000
--- a/app/models/product_supplier.rb
+++ /dev/null
@@ -1,4 +0,0 @@
-class ProductSupplier < ApplicationRecord
-  belongs_to :product
-  belongs_to :supplier
-end
diff --git a/app/models/supplier.rb b/app/models/supplier.rb
index f9c4ba8..b56bc3d 100644
--- a/app/models/supplier.rb
+++ b/app/models/supplier.rb
@@ -4,8 +4,8 @@ class Supplier < ApplicationRecord
   devise :database_authenticatable, :registerable,
          :recoverable, :rememberable
   has_many :offers
-  has_many :product_suppliers, dependent: :delete_all
-  has_many :products, through: :product_suppliers
+  has_many :attached_products, as: :attachable, dependent: :delete_all
+  has_many :products, through: :attached_products
   validates :identifier, presence: true, allow_blank: false, uniqueness: true
   validates :email, presence: true, allow_blank: false
   validates :tin, presence: true, allow_blank: false
diff --git a/app/policies/customer_policy.rb b/app/policies/customer_policy.rb
index d8a662a..34aae70 100644
--- a/app/policies/customer_policy.rb
+++ b/app/policies/customer_policy.rb
@@ -34,14 +34,6 @@ class CustomerPolicy
     @user.class.name == "Broker"
   end
 
-  def attach_products?
-    record == user or @user.class.name == "Broker"
-  end
-
-  def attach_products_create?
-    record == user or @user.class.name == "Broker"
-  end
-
   class Scope
     attr_reader :user, :scope
 
diff --git a/app/policies/supplier_policy.rb b/app/policies/supplier_policy.rb
index 5c10266..702853c 100644
--- a/app/policies/supplier_policy.rb
+++ b/app/policies/supplier_policy.rb
@@ -34,14 +34,6 @@ class SupplierPolicy
     @user.class.name == "Broker"
   end
 
-  def attach_products?
-    record == user or @user.class.name == "Broker"
-  end
-
-  def attach_products_create?
-    record == user or @user.class.name == "Broker"
-  end
-
   class Scope
     attr_reader :user, :scope
 
diff --git a/app/validators/product_already_attached_validator.rb b/app/validators/product_already_attached_validator.rb
new file mode 100644
index 0000000..6a56897
--- /dev/null
+++ b/app/validators/product_already_attached_validator.rb
@@ -0,0 +1,7 @@
+class ProductAlreadyAttachedValidator < ActiveModel::Validator
+  def validate(record)
+    unless AttachedProduct.find_by(product_id: record.product_id, attachable_type: record.attachable_type, attachable_id: record.attachable_id).nil?
+      record.errors[:base] << I18n.t('activerecord.errors.models.attached_product.product.uniqueness', product: record.product.name)
+    end
+  end
+end
diff --git a/app/validators/product_approved_validator.rb b/app/validators/product_approved_validator.rb
new file mode 100644
index 0000000..44da68e
--- /dev/null
+++ b/app/validators/product_approved_validator.rb
@@ -0,0 +1,7 @@
+class ProductApprovedValidator < ActiveModel::Validator
+  def validate(record)
+    unless record.product.approved
+      record.errors[:base] << I18n.t('activerecord.errors.models.attached_product.product.not_approved', product: record.product.name)
+    end
+  end
+end
diff --git a/app/views/attached_products/_form.html.erb b/app/views/attached_products/_form.html.erb
new file mode 100644
index 0000000..0756c61
--- /dev/null
+++ b/app/views/attached_products/_form.html.erb
@@ -0,0 +1,17 @@
+<%= form_with(model: attach_product, local: true) do |form| %>
+  <% if attach_product.errors.any? %>
+    <div id="error_explanation">
+      <h2><%= pluralize(attach_product.errors.count, "error") %> prohibited this attach_product from being saved:</h2>
+
+      <ul>
+        <% attach_product.errors.full_messages.each do |message| %>
+          <li><%= message %></li>
+        <% end %>
+      </ul>
+    </div>
+  <% end %>
+
+  <div class="actions">
+    <%= form.submit %>
+  </div>
+<% end %>
diff --git a/app/views/attached_products/edit.html.erb b/app/views/attached_products/edit.html.erb
new file mode 100644
index 0000000..bb14aee
--- /dev/null
+++ b/app/views/attached_products/edit.html.erb
@@ -0,0 +1,6 @@
+<h1>Editing Attach Product</h1>
+
+<%= render 'form', attach_product: @attach_product %>
+
+<%= link_to 'Show', @attach_product %> |
+<%= link_to 'Back', attach_products_path %>
diff --git a/app/views/attached_products/index.html.erb b/app/views/attached_products/index.html.erb
new file mode 100644
index 0000000..0cb961f
--- /dev/null
+++ b/app/views/attached_products/index.html.erb
@@ -0,0 +1,25 @@
+<p id="notice"><%= notice %></p>
+
+<h1>Attach Products</h1>
+
+<table>
+  <thead>
+    <tr>
+      <th colspan="3"></th>
+    </tr>
+  </thead>
+
+  <tbody>
+    <% @attach_products.each do |attach_product| %>
+      <tr>
+        <td><%= link_to 'Show', attach_product %></td>
+        <td><%= link_to 'Edit', edit_attach_product_path(attach_product) %></td>
+        <td><%= link_to 'Destroy', attach_product, method: :delete, data: { confirm: 'Are you sure?' } %></td>
+      </tr>
+    <% end %>
+  </tbody>
+</table>
+
+<br>
+
+<%= link_to 'New Attach Product', new_attach_product_path %>
diff --git a/app/views/attached_products/new.html.erb b/app/views/attached_products/new.html.erb
new file mode 100644
index 0000000..baad8ec
--- /dev/null
+++ b/app/views/attached_products/new.html.erb
@@ -0,0 +1,5 @@
+<h1>New Attach Product</h1>
+
+<%= render 'form', attach_product: @attach_product %>
+
+<%= link_to 'Back', attach_products_path %>
diff --git a/app/views/attached_products/show.html.erb b/app/views/attached_products/show.html.erb
new file mode 100644
index 0000000..93846e5
--- /dev/null
+++ b/app/views/attached_products/show.html.erb
@@ -0,0 +1,4 @@
+<p id="notice"><%= notice %></p>
+
+<%= link_to 'Edit', edit_attach_product_path(@attach_product) %> |
+<%= link_to 'Back', attach_products_path %>
diff --git a/app/views/customers/attach_products.html.erb b/app/views/customers/attach_products.html.erb
deleted file mode 100644
index ba4fc4f..0000000
--- a/app/views/customers/attach_products.html.erb
+++ /dev/null
@@ -1,41 +0,0 @@
-<h1><%= t("customer.attach_products") %></h1>
-<%# binding.pry %>
-<%= form_tag(attach_products_create_customer_path(@customer.id), authenticity_token: true) do -%>
-  <%= label_tag :product %>
-  <div class="row">
-    <div class="col-md-8">
-      <div class="card">
-        <table class="table-all table-bordered table-responsive">
-          <thead>
-            <tr>
-              <th><%= Product.human_attribute_name("name") %></th>
-              <th class="table-icons-1" colspan="1"></th>
-            </tr>
-          </thead>
-
-          <tbody>
-            <% for product in @products %>
-              <tr>
-                <td><%= t("product.name." + product.name) %></td>
-                <td>
-                  <%= check_box_tag "products[]", product.id,
-                   @products_attached.include?(product.id),
-                   id: "product_" + product.id.to_s %>
-                </td>
-              </tr>
-            <% end %>
-          </tbody>
-        </table>
-      </div>
-    </div>
-  </div>
-
-  <div><%= submit_tag 'Save' %></div>
-<% end -%>
-</br>
-
-<%= link_to t("products.new"), link_new_product_path%>
-<% if broker_signed_in? %>
-  </br>
-  <%= link_to t("customers.list"), customers_path(@customer_id) %>
-<% end %>
diff --git a/app/views/customers/show.html.erb b/app/views/customers/show.html.erb
index d41cf7e..89424d4 100644
--- a/app/views/customers/show.html.erb
+++ b/app/views/customers/show.html.erb
@@ -94,7 +94,7 @@
       </table>
       <% end %>
       <br>
-      <%= link_to t("customers.attach_products"), attach_products_customer_path(@customer.id), class:  "btn btn-primary btn-sm" %>
+      <%= link_to t("customers.attach_products"), attach_products_path(@customer.id), class:  "btn btn-primary btn-sm" %>
     </div>
   </div>
 </div>
diff --git a/app/views/suppliers/attach_products.html.erb b/app/views/suppliers/attach_products.html.erb
deleted file mode 100644
index fa4439c..0000000
--- a/app/views/suppliers/attach_products.html.erb
+++ /dev/null
@@ -1,41 +0,0 @@
-<h1><%= t("supplier.attach_products") %></h1>
-<%# binding.pry %>
-<%= form_tag(attach_products_create_supplier_path(@supplier.id), authenticity_token: true) do -%>
-  <%= label_tag :product %>
-  <div class="row">
-    <div class="col-md-8">
-      <div class="card">
-        <table class="table-all table-bordered table-responsive">
-          <thead>
-            <tr>
-              <th><%= Product.human_attribute_name("name") %></th>
-              <th class="table-icons-1" colspan="1"></th>
-            </tr>
-          </thead>
-
-          <tbody>
-            <% for product in @products %>
-              <tr>
-                <td><%= t("product.name." + product.name) %></td>
-                <td>
-                  <%= check_box_tag "products[]", product.id,
-                   @products_attached.include?(product.id),
-                   id: "product_" + product.id.to_s %>
-                </td>
-              </tr>
-            <% end %>
-          </tbody>
-        </table>
-      </div>
-    </div>
-  </div>
-
-  <div><%= submit_tag 'Save' %></div>
-<% end -%>
-</br>
-
-<%= link_to t("products.new"), link_new_product_path%>
-<% if broker_signed_in? %>
-  </br>
-  <%= link_to t("suppliers.list"), suppliers_path(@supplier_id) %>
-<% end %>
diff --git a/app/views/suppliers/show.html.erb b/app/views/suppliers/show.html.erb
index f77c1fe..40175b3 100644
--- a/app/views/suppliers/show.html.erb
+++ b/app/views/suppliers/show.html.erb
@@ -104,7 +104,7 @@
       </table>
       <% end %>
       <br>
-      <%= link_to t("suppliers.attach_products"), attach_products_supplier_path(@supplier.id), class:  "btn btn-primary btn-sm" %>
+      <%= link_to t("suppliers.attach_products"), attach_products_path(@supplier.id), class:  "btn btn-primary btn-sm" %>
     </div>
   </div>
 </div>
diff --git a/config/application.rb b/config/application.rb
index 0c3a74f..9359d2e 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -40,6 +40,7 @@ module Alphawholesale
     config.autoload_paths += %W(#{config.root}/app/helpers)
     config.autoload_paths += %W(#{config.root}/app/services)
     config.autoload_paths += %W(#{config.root}/lib)
+    config.autoload_paths += %W(#{config.root}/app/validadors)
     config.active_job.queue_adapter = :sidekiq
   end
 end
diff --git a/config/locales/models/en.yml b/config/locales/models/en.yml
index 19e2d37..6559abe 100644
--- a/config/locales/models/en.yml
+++ b/config/locales/models/en.yml
@@ -173,6 +173,10 @@ en:
         unit_price: "Unit price"
     errors:
       models:
+        attached_product:
+          product:
+            uniqueness: "%{product} is already attached"
+            not_approved: "%{product} is not approved"
         broker:
           attributes:
             identifier:
diff --git a/config/locales/models/es.yml b/config/locales/models/es.yml
index 1bfdcbd..f0a20aa 100644
--- a/config/locales/models/es.yml
+++ b/config/locales/models/es.yml
@@ -171,6 +171,10 @@ es:
         unit_price: "Precio por Unitad"
     errors:
       models:
+        attached_product:
+          product:
+            uniqueness: "%{product} esta ya relacionado"
+            not_approved: "%{product} no esta aprobado"
         broker:
           attributes:
             identifier:
diff --git a/config/locales/models/fr.yml b/config/locales/models/fr.yml
index f037743..5b59010 100644
--- a/config/locales/models/fr.yml
+++ b/config/locales/models/fr.yml
@@ -176,6 +176,10 @@ fr:
         unit_price: "Prix à l'unité"
     errors:
       models:
+        attached_product:
+          product:
+            uniqueness: "%{product} est déja attaché"
+            not_approved: "%{product} n'est pas approuvé"
         broker:
           attributes:
             identifier:
diff --git a/config/routes.rb b/config/routes.rb
index edbc151..432b506 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -1,5 +1,6 @@
 require 'sidekiq/web'
 Rails.application.routes.draw do
+  resources :attached_products
   root 'welcome#home'
 
   devise_for :suppliers, controllers: {
@@ -50,21 +51,9 @@ Rails.application.routes.draw do
     resources :tender_lines
   end
 
-  resources :suppliers, concerns: [:offertable, :orderable, :productable, :tenderable] do
-    member do
-      get 'attach_products', as: :attach_products
-      post 'attach_products_create', as: :attach_products_create
-      post 'detach_product', as: :detach_product
-    end
-  end
+  resources :suppliers, concerns: [:offertable, :orderable, :productable, :tenderable]
 
-  resources :customers, concerns: [:offertable, :orderable, :tenderable, :productable] do
-    member do
-      get 'attach_products', as: :attach_products
-      post 'attach_products_create', as: :attach_products_create
-      post 'detach_product', as: :detach_product
-    end
-  end
+  resources :customers, concerns: [:offertable, :orderable, :tenderable, :productable]
   authenticate :broker do
     mount Sidekiq::Web => '/sidekiq'
   end
diff --git a/db/migrate/20190912083320_create_attached_products.rb b/db/migrate/20190912083320_create_attached_products.rb
new file mode 100644
index 0000000..83271e6
--- /dev/null
+++ b/db/migrate/20190912083320_create_attached_products.rb
@@ -0,0 +1,10 @@
+class CreateAttachedProducts < ActiveRecord::Migration[6.0]
+  def change
+    create_table :attached_products do |t|
+      t.references :product, null: false, foreign_key: true
+      t.references :attachable, polymorphic: true, null: false
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20190912085901_revert_create_product_customer.rb b/db/migrate/20190912085901_revert_create_product_customer.rb
new file mode 100644
index 0000000..22c201d
--- /dev/null
+++ b/db/migrate/20190912085901_revert_create_product_customer.rb
@@ -0,0 +1,6 @@
+class RevertCreateProductCustomer < ActiveRecord::Migration[6.0]
+  require_relative '20181018082948_create_product_customer'
+  def change
+    revert CreateProductCustomer
+  end
+end
diff --git a/db/migrate/20190912090358_revert_create_product_supplier.rb b/db/migrate/20190912090358_revert_create_product_supplier.rb
new file mode 100644
index 0000000..504e5b5
--- /dev/null
+++ b/db/migrate/20190912090358_revert_create_product_supplier.rb
@@ -0,0 +1,6 @@
+class RevertCreateProductSupplier < ActiveRecord::Migration[6.0]
+  require_relative '20180919082948_create_product_supplier'
+  def change
+    revert CreateProductSupplier
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 902981f..8e372c1 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -10,7 +10,7 @@
 #
 # It's strongly recommended that you check this file into your version control system.
 
-ActiveRecord::Schema.define(version: 2019_09_06_142530) do
+ActiveRecord::Schema.define(version: 2019_09_12_090358) do
 
   # These are extensions that must be enabled in order to support this database
   enable_extension "plpgsql"
@@ -26,6 +26,16 @@ ActiveRecord::Schema.define(version: 2019_09_06_142530) do
     t.index ["supplier_id"], name: "index_aspects_on_supplier_id"
   end
 
+  create_table "attached_products", force: :cascade do |t|
+    t.bigint "product_id", null: false
+    t.string "attachable_type", null: false
+    t.bigint "attachable_id", null: false
+    t.datetime "created_at", precision: 6, null: false
+    t.datetime "updated_at", precision: 6, null: false
+    t.index ["attachable_type", "attachable_id"], name: "index_attached_products_on_attachable_type_and_attachable_id"
+    t.index ["product_id"], name: "index_attached_products_on_product_id"
+  end
+
   create_table "brokers", force: :cascade do |t|
     t.string "email"
     t.string "identifier", default: "", null: false
@@ -115,24 +125,6 @@ ActiveRecord::Schema.define(version: 2019_09_06_142530) do
     t.index ["supplier_id"], name: "index_packagings_on_supplier_id"
   end
 
-  create_table "product_customers", force: :cascade do |t|
-    t.bigint "customer_id"
-    t.bigint "product_id"
-    t.datetime "created_at", null: false
-    t.datetime "updated_at", null: false
-    t.index ["customer_id"], name: "index_product_customers_on_customer_id"
-    t.index ["product_id"], name: "index_product_customers_on_product_id"
-  end
-
-  create_table "product_suppliers", force: :cascade do |t|
-    t.bigint "supplier_id"
-    t.bigint "product_id"
-    t.datetime "created_at", null: false
-    t.datetime "updated_at", null: false
-    t.index ["product_id"], name: "index_product_suppliers_on_product_id"
-    t.index ["supplier_id"], name: "index_product_suppliers_on_supplier_id"
-  end
-
   create_table "products", force: :cascade do |t|
     t.bigint "supplier_id"
     t.string "reference"
@@ -222,4 +214,5 @@ ActiveRecord::Schema.define(version: 2019_09_06_142530) do
     t.index ["supplier_id"], name: "index_varieties_on_supplier_id"
   end
 
+  add_foreign_key "attached_products", "products"
 end
diff --git a/spec/controllers/customers_controller_attach_product_create_spec.rb b/spec/controllers/customers_controller_attach_product_create_spec.rb
deleted file mode 100644
index a9a7a4a..0000000
--- a/spec/controllers/customers_controller_attach_product_create_spec.rb
+++ /dev/null
@@ -1,115 +0,0 @@
-require 'rails_helper'
-# `rails-controller-testing` gem.
-
-RSpec.describe CustomersController, type: :controller do
-  let(:customer1) {create(:customer)}
-  let!(:customer2) {create(:customer)}
-  let!(:product1) {create(:product)}
-  let!(:product2) {create(:product)}
-  let!(:product3) {create(:product)}
-  let!(:supplier1) {create(:supplier)}
-  let(:broker1) {create(:broker)}
-
-  describe "POST #attach_product_create" do
-
-    # TEST as a guest user
-    # TEST when a customer is asked for creating an attach products
-    # TEST then the root page is returned
-    # TEST and a message of unauthenticated is send
-    describe "as guest user send for creating a customer attach product" do
-      before :each do
-        post :attach_products_create,
-         params: {id: customer1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the root page and returns a non authorized message" do
-        expect(response.redirect_url).to eq("http://test.host/")
-        expect(flash.alert).to match(
-         I18n.t('devise.failure.unauthenticated'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when a customer is asked for creating an attach products
-    # TEST then the supplier's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged supplier asking for creating a customer attach product" do
-      before :each do
-        sign_in(supplier1)
-        post :attach_products_create,
-         params: {id: customer1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the supplier's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when a customer is asked for creating an attach products to an other customer
-    # TEST then the customer's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged customer asking for creating attach product to an other customer" do
-      before :each do
-        sign_in(customer1)
-        post :attach_products_create,
-         params: {id: customer2.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the customer's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when a customer is asked for attaching products to himself
-    # TEST then the customer's page is returned
-    # TEST and the new products are attached
-    # TEST and a message of success is sent
-    describe "as a logged customer creating an attachment to products" do
-      before :each do
-        customer1.products = []
-        sign_in(customer1)
-        post :attach_products_create,
-         params: {id: customer1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the customer's page
-       and attaches the producs to the customers" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(Customer.find(customer1.id).products.sort).to eq(
-         [product1, product2].sort)
-      end
-    end
-
-
-    # TEST as a logged broker
-    # TEST when a customer is asked for attaching products
-    # TEST then the customer's page is returned
-    # TEST and the new products are attached
-    describe "as a logged customer creating an attachment to products" do
-      before :each do
-        customer1.products = []
-        sign_in(broker1)
-        post :attach_products_create,
-         params: {id: customer1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the customer's page and
-       attaches the producs to the customers" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(Customer.find(customer1.id).products.sort).to eq(
-         [product1, product2].sort)
-      end
-
-    end
-  end
-end
diff --git a/spec/controllers/customers_controller_attach_product_spec.rb b/spec/controllers/customers_controller_attach_product_spec.rb
deleted file mode 100644
index 588f899..0000000
--- a/spec/controllers/customers_controller_attach_product_spec.rb
+++ /dev/null
@@ -1,113 +0,0 @@
-require 'rails_helper'
-# `rails-controller-testing` gem.
-
-RSpec.describe CustomersController, type: :controller do
-  let(:customer1) {create(:customer)}
-  let!(:customer2) {create(:customer, identifier: "customer2",
-                                      email: "customer2@test.com")}
-  let!(:product1) {create(:product, approved: true)}
-  let!(:product2) {create(:product, approved: true)}
-  let!(:product3) {create(:product, approved: true)}
-  let!(:product4) {create(:product, approved: true)}
-
-  let!(:supplier1) {create(:supplier)}
-  let(:broker1) {create(:broker)}
-
-  describe "POST #attach_product" do
-
-    # TEST as a guest user
-    # TEST when a customer is asked for the attach products page
-    # TEST then the 'welcome' page is returned
-    # TEST and a message of unauthenticated is send
-    describe "as guest user" do
-      before :each do
-        get 'attach_products', params: {id: customer1.to_param}
-      end
-
-      it "returns the root page and returns a non authorized message" do
-        expect(response.redirect_url).to eq("http://test.host/")
-        expect(flash.alert).to match(I18n.t(
-         'devise.failure.unauthenticated'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when a customer is asked for the attach products page
-    # TEST then the supplier's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged supplier" do
-      before :each do
-        sign_in(supplier1)
-        get 'attach_products', params: {id: customer1.to_param}
-      end
-
-      it "returns the customer's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when he asks for the attach products page for an other customer
-    # TEST when an other customer is asked for show
-    # TEST then the customer's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged customer asking an other customer's page" do
-      before :each do
-        sign_in(customer1)
-        get 'attach_products', params: {id: customer2.to_param}
-      end
-
-      it "returns the customer's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when he asks for his attach products page
-    # TEST then the customer is assigned
-    # TEST and all the products of the customer are assigned but the products
-    # TEST owned by an other customer
-    # TEST and the customer's attached products page is returned
-    describe "as a logged customer asking for his page" do
-      before :each do
-        customer1.products = [product1, product2]
-        sign_in(customer1)
-
-        get 'attach_products', params: {id: customer1.to_param}
-      end
-
-      it "assigns the customer and assigns all the customer's attached products
-       and returns the customer's attach products page" do
-        expect(assigns(:customer)).to eq(customer1)
-        expect(assigns(:products).sort).to eq([product3, product4].sort)
-        expect(response).to render_template(:attach_products)
-      end
-    end
-
-    # TEST as a logged broker
-    # TEST when the attached products page for a customer is asked
-    # TEST then the customer is assigned
-    # TEST and all the products of the customer are assigned
-    # TEST and the customer's attached products page is returned
-    describe "as a logged broker asking for a customer's page" do
-      before :each do
-        customer1.products = [product1, product2]
-        sign_in(broker1)
-        get 'attach_products', params: {id: customer1.to_param}
-      end
-
-      it "assigns the customer and assigns all the customer's offers
-       and returns the customer's attach products page" do
-        expect(assigns(:customer)).to eq(customer1)
-        expect(assigns(:products).sort).to eq([product3, product4].sort)
-        expect(response).to render_template(:attach_products)
-      end
-    end
-  end
-end
diff --git a/spec/controllers/suppliers_controller_attach_product_create_spec.rb b/spec/controllers/suppliers_controller_attach_product_create_spec.rb
deleted file mode 100644
index d7375c1..0000000
--- a/spec/controllers/suppliers_controller_attach_product_create_spec.rb
+++ /dev/null
@@ -1,115 +0,0 @@
-require 'rails_helper'
-# `rails-controller-testing` gem.
-
-RSpec.describe SuppliersController, type: :controller do
-  let!(:supplier1) {create(:supplier)}
-  let!(:supplier2) {create(:supplier)}
-  let!(:product1) {create(:product)}
-  let!(:product2) {create(:product)}
-  let!(:product3) {create(:product)}
-  let(:customer1) {create(:customer)}
-  let(:broker1) {create(:broker)}
-
-  describe "POST #attach_product_create" do
-
-    # TEST as a guest user
-    # TEST when a supplier is asked for creating an attach products
-    # TEST then the root page is returned
-    # TEST and a message of unauthenticated is send
-    describe "as guest user send for creating a supplier attach product" do
-      before :each do
-        post :attach_products_create,
-         params: {id: supplier1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the root page and returns a non authorized message" do
-        expect(response.redirect_url).to eq("http://test.host/")
-        expect(flash.alert).to match(
-         I18n.t('devise.failure.unauthenticated'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when a supplier is asked for creating an attach products
-    # TEST then the customer's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged customer asking for creating a supplier attach product" do
-      before :each do
-        sign_in(customer1)
-        post :attach_products_create,
-         params: {id: supplier1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the customer's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when a supplier is asked for creating
-    # TEST an attach products to an other supplier
-    # TEST then the supplier's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged supplier asking for creating attach product
-     to an other supplier" do
-      before :each do
-        sign_in(supplier1)
-        post :attach_products_create,
-         params: {id: supplier2.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the supplier's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when a supplier is asked for attaching products to himself
-    # TEST then the supplier's page is returned
-    # TEST and the new products are attached
-    # TEST and a message of success is sent
-    describe "as a logged supplier creating an attachment to products" do
-      before :each do
-        supplier1.products = []
-        sign_in(supplier1)
-        post :attach_products_create,
-         params: {id: supplier1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the supplier's page and attaches the producs to the suppliers" do
-        expect(response.redirect_url).to eq("http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(Supplier.find(supplier1.id).products.sort).to eq(
-         [product1, product2].sort)
-      end
-    end
-
-
-    # TEST as a logged broker
-    # TEST when a supplier is asked for attaching products
-    # TEST then the supplier's page is returned
-    # TEST and the new products are attached
-    describe "as a logged supplier creating an attachment to products" do
-      before :each do
-        supplier1.products = []
-        sign_in(broker1)
-        post :attach_products_create,
-         params: {id: supplier1.id, products: [product1.id, product2.id]}
-      end
-
-      it "returns the supplier's page
-       and attaches the producs to the suppliers" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(Supplier.find(supplier1.id).products.sort).to eq(
-         [product1, product2].sort)
-      end
-
-    end
-  end
-end
diff --git a/spec/controllers/suppliers_controller_attach_product_spec.rb b/spec/controllers/suppliers_controller_attach_product_spec.rb
deleted file mode 100644
index 715d819..0000000
--- a/spec/controllers/suppliers_controller_attach_product_spec.rb
+++ /dev/null
@@ -1,120 +0,0 @@
-require 'rails_helper'
-# `rails-controller-testing` gem.
-
-RSpec.describe SuppliersController, type: :controller do
-  let!(:supplier1) {create(:supplier)}
-  let!(:supplier2) {create(:supplier, identifier: "supplier2",
-                                      email: "supplier2@test.com")}
-  let!(:product1) {create(:product, approved: true)}
-  let!(:product2) {create(:product, approved: true)}
-  let!(:product3) {create(:product)}
-  let!(:product4) {create(:product)}
-
-  let(:customer1) {create(:customer)}
-  let(:broker1) {create(:broker)}
-
-  describe "POST #attach_product" do
-
-    # TEST as a guest user
-    # TEST when a supplier is asked for the attach products page
-    # TEST then the 'welcome' page is returned
-    # TEST and a message of unauthenticated is send
-    describe "as guest user" do
-      before :each do
-        get 'attach_products', params: {id: supplier1.to_param}
-      end
-
-      it "returns the root page and returns a non authorized message" do
-        expect(response.redirect_url).to eq("http://test.host/")
-        expect(flash.alert).to match(I18n.t(
-         'devise.failure.unauthenticated'))
-      end
-    end
-
-    # TEST as a logged customer
-    # TEST when a supplier is asked for the attach products page
-    # TEST then the customer's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged customer" do
-      before :each do
-        sign_in(customer1)
-        get 'attach_products', params: {id: supplier1.to_param}
-      end
-
-      it "returns the customer's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/customers/" + customer1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when he asks for the attach products page for an other supplier
-    # TEST when an other supplier is asked for show
-    # TEST then the supplier's page is returned
-    # TEST and a message of unauthorized is send
-    describe "as a logged supplier asking an other supplier's page" do
-      before :each do
-        sign_in(supplier1)
-        get 'attach_products', params: {id: supplier2.to_param}
-      end
-
-      it "returns the supplier's page and returns a non authorized message" do
-        expect(response.redirect_url).to eq(
-         "http://test.host/suppliers/" + supplier1.id.to_s)
-        expect(flash.alert).to match(
-         I18n.t('devise.errors.messages.not_authorized'))
-      end
-    end
-
-    # TEST as a logged supplier
-    # TEST when he asks for his attach products page
-    # TEST then the supplier is assigned
-    # TEST and all the products of the supplier are assigned but the products
-    # TEST owned by an other supplier
-    # TEST and the supplier's attached products page is returned
-    describe "as a logged supplier asking for his page" do
-      before :each do
-        supplier1.products = [product1, product2]
-        product4.supplier = supplier2
-        product4.approved = false
-        product4.save
-        sign_in(supplier1)
-
-        get 'attach_products', params: {id: supplier1.to_param}
-      end
-
-        it "assigns the supplier and
-         assigns all the supplier's attached products and
-         returns the supplier's attach products page" do
-        expect(assigns(:supplier)).to eq(supplier1)
-        expect(assigns(:products).sort).to eq([product1, product2].sort)
-        expect(response).to render_template(:attach_products)
-      end
-    end
-
-    # TEST as a logged broker
-    # TEST when the attached products page for a supplier is asked
-    # TEST then the supplier is assigned
-    # TEST and all the products of the supplier are assigned
-    # TEST and the supplier's attached products page is returned
-    describe "as a logged broker asking for a supplier's page" do
-      before :each do
-        supplier1.products = [product1, product2]
-        product4.supplier = supplier2
-        product4.approved = false
-        product4.save
-        sign_in(broker1)
-        get 'attach_products', params: {id: supplier1.to_param}
-      end
-
-      it "assigns the supplier and assigns all the supplier's offers and
-       returns the supplier's attach products page" do
-        expect(assigns(:supplier)).to eq(supplier1)
-        expect(assigns(:products).sort).to eq([product1, product2].sort)
-        expect(response).to render_template(:attach_products)
-      end
-    end
-  end
-end
diff --git a/spec/factories/attached_products.rb b/spec/factories/attached_products.rb
new file mode 100644
index 0000000..ede6338
--- /dev/null
+++ b/spec/factories/attached_products.rb
@@ -0,0 +1,6 @@
+FactoryBot.define do
+  factory :attached_product do
+    product { nil }
+    attachable { nil }
+  end
+end
diff --git a/spec/features/attach_product_to_customer.rb b/spec/features/attach_product_to_customer.rb
new file mode 100644
index 0000000..44c240f
--- /dev/null
+++ b/spec/features/attach_product_to_customer.rb
@@ -0,0 +1,45 @@
+require 'rails_helper'
+
+# a customer can have somme products attached
+# these products appears in a list of attached products for this customer
+RSpec.describe 'Customers Feature new', type: :feature do
+  let(:product1) {create(:product, approved: true)}
+  let!(:product2) {create(:product, approved: true)}
+  let!(:product3) {create(:product, approved: true)}
+  let!(:product4) {create(:product, approved: true)}
+  let(:customer1) {create(:customer, products: [product1])}
+
+  describe 'GET #attach_products' do
+
+    # TEST as a customer
+    # TEST when a list of product available is asked to be attached
+    # TEST then a list of the attached product can be displayed
+    describe 'as a customer' do
+      before :each do
+        sign_in(customer1)
+      end
+
+      it 'assigns a new customer' do
+        visit customer_path(customer1)
+        find('#attach_products').click
+        expect(page).to have_xpath("//form[@action='/attach_products'
+                                   and @method='post']")
+        expect(page.find("input#product_" + product1.id.to_s)).to be_checked
+        expect(page.find("input#product_" + product4.id.to_s)).not_to be_checked
+        find('input#attach_product' + product2.id.to_s).check
+        find('input#attach_product' + product3.id.to_s).check
+        find('[name=commit]').click
+        expect(page.current_url).to eq(
+          'http://www.example.com/attached_products/')
+        expect(page).to have_content(supplier.email)
+        expect(page).to have_field({id: 'product_' + product1.id.to_s})
+        expect(page).to have_field({id: 'product_' + product2.id.to_s})
+        expect(page).to have_field({id: 'product_' + product3.id.to_s})
+        expect(page).not_to have_field({id: 'product_' + product4.id.to_s})
+        expect(page).to have_content(
+          I18n.t('controllers.attach_product.successfully_attached'))
+      end
+    end
+
+  end
+end
diff --git a/spec/models/attached_product_spec.rb b/spec/models/attached_product_spec.rb
new file mode 100644
index 0000000..6b64e3c
--- /dev/null
+++ b/spec/models/attached_product_spec.rb
@@ -0,0 +1,17 @@
+require 'rails_helper'
+
+RSpec.describe AttachedProduct, type: :model do
+  let(:product1) {create(:product, approved: true)}
+  let(:product2) {create(:product, approved: false)}
+  let(:customer1) {create(:customer)}
+
+  it "can attach an approved product with a customer" do
+    AttachedProduct.create(product_id: product1.id, attachable_type: "Customer", attachable_id: customer1.id)
+    expect(customer1.products).to include(product1)
+  end
+
+  it "can not attach an non approved product with a customer" do
+    AttachedProduct.create(product_id: product2.id, attachable_type: "Customer", attachable_id: customer1.id)
+    expect(customer1.products).not_to include(product2)
+  end
+end
